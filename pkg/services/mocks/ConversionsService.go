// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/usernamesalah/game-currency/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// ConversionsService is an autogenerated mock type for the ConversionsService type
type ConversionsService struct {
	mock.Mock
}

// CreateConversion provides a mock function with given fields: ctx, conversion
func (_m *ConversionsService) CreateConversion(ctx context.Context, conversion models.Conversion) (models.Conversion, error) {
	ret := _m.Called(ctx, conversion)

	var r0 models.Conversion
	if rf, ok := ret.Get(0).(func(context.Context, models.Conversion) models.Conversion); ok {
		r0 = rf(ctx, conversion)
	} else {
		r0 = ret.Get(0).(models.Conversion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Conversion) error); ok {
		r1 = rf(ctx, conversion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConversion provides a mock function with given fields: ctx, id
func (_m *ConversionsService) DeleteConversion(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConversion provides a mock function with given fields: ctx, id
func (_m *ConversionsService) GetConversion(ctx context.Context, id int64) (models.Conversion, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Conversion
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Conversion); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Conversion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConversionBy provides a mock function with given fields: ctx, from, to
func (_m *ConversionsService) GetConversionBy(ctx context.Context, from int64, to int64) (models.Conversion, error) {
	ret := _m.Called(ctx, from, to)

	var r0 models.Conversion
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) models.Conversion); ok {
		r0 = rf(ctx, from, to)
	} else {
		r0 = ret.Get(0).(models.Conversion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConversions provides a mock function with given fields: ctx
func (_m *ConversionsService) ListConversions(ctx context.Context) ([]models.Conversion, error) {
	ret := _m.Called(ctx)

	var r0 []models.Conversion
	if rf, ok := ret.Get(0).(func(context.Context) []models.Conversion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Conversion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConversion provides a mock function with given fields: ctx, conversion
func (_m *ConversionsService) UpdateConversion(ctx context.Context, conversion models.Conversion) (models.Conversion, error) {
	ret := _m.Called(ctx, conversion)

	var r0 models.Conversion
	if rf, ok := ret.Get(0).(func(context.Context, models.Conversion) models.Conversion); ok {
		r0 = rf(ctx, conversion)
	} else {
		r0 = ret.Get(0).(models.Conversion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Conversion) error); ok {
		r1 = rf(ctx, conversion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
