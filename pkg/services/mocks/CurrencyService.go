// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	models "github.com/usernamesalah/game-currency/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// CurrencyService is an autogenerated mock type for the CurrencyService type
type CurrencyService struct {
	mock.Mock
}

// CreateCurrency provides a mock function with given fields: ctx, currency
func (_m *CurrencyService) CreateCurrency(ctx context.Context, currency models.Currency) (models.Currency, error) {
	ret := _m.Called(ctx, currency)

	var r0 models.Currency
	if rf, ok := ret.Get(0).(func(context.Context, models.Currency) models.Currency); ok {
		r0 = rf(ctx, currency)
	} else {
		r0 = ret.Get(0).(models.Currency)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Currency) error); ok {
		r1 = rf(ctx, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCurrency provides a mock function with given fields: ctx, id
func (_m *CurrencyService) DeleteCurrency(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrency provides a mock function with given fields: ctx, id
func (_m *CurrencyService) GetCurrency(ctx context.Context, id int64) (models.Currency, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Currency
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.Currency); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Currency)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCurrency provides a mock function with given fields: ctx
func (_m *CurrencyService) ListCurrency(ctx context.Context) ([]models.Currency, error) {
	ret := _m.Called(ctx)

	var r0 []models.Currency
	if rf, ok := ret.Get(0).(func(context.Context) []models.Currency); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Currency)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCurrency provides a mock function with given fields: ctx, currency
func (_m *CurrencyService) UpdateCurrency(ctx context.Context, currency models.Currency) (models.Currency, error) {
	ret := _m.Called(ctx, currency)

	var r0 models.Currency
	if rf, ok := ret.Get(0).(func(context.Context, models.Currency) models.Currency); ok {
		r0 = rf(ctx, currency)
	} else {
		r0 = ret.Get(0).(models.Currency)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Currency) error); ok {
		r1 = rf(ctx, currency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
